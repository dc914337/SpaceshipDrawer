//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerObjectVS
{
    float4x4 WorldViewProjection;       // Offset:    0, size:   64
    float4x4 World;                     // Offset:   64, size:   64
    float4x4 gWorldInvTranspose;        // Offset:  128, size:   64
}

cbuffer cbPerObjectPS
{
    float3  EyePosition;                // Offset:    0, size:   12
    float   specExp;                    // Offset:   12, size:    4
    float   specIntensity;              // Offset:   16, size:    4
}

cbuffer cbDirLightPS
{
    float3  AmbientDown;                // Offset:    0, size:   12
    float3  AmbientRange;               // Offset:   16, size:   12
    float3  DirToLight;                 // Offset:   32, size:   12
    float3  DirLightColor;              // Offset:   48, size:   12
}

cbuffer PointLightConstants
{
    float3  PointLightPosition;         // Offset:    0, size:   12
    float   PointLightRangeRcp;         // Offset:   12, size:    4
    float3  PointLightColor;            // Offset:   16, size:   12
}

//
// 2 local object(s)
//
Texture2D DiffuseTexture;
SamplerState LinearSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    MaxAnisotropy = uint(1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 Ambient
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectVS
                // {
                //
                //   float4x4 WorldViewProjection;      // Offset:    0 Size:    64
                //   float4x4 World;                    // Offset:   64 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectVS                     cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyz         2     NONE  float   xyz 
                // TEXCOORD                 2   xyz         3     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_temps 4
                
                #line 44 "ForwardLightCommon.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
                
                #line 47
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // output<9:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // output<10:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // output<11:NaN:Inf>
                mov r0.xy, v2.xyxx  // output<4,5>
                dp3 r3.x, v1.xyzx, cb0[8].xyzx  // output<6:NaN:Inf>
                dp3 r3.y, v1.xyzx, cb0[9].xyzx  // output<7:NaN:Inf>
                dp3 r3.z, v1.xyzx, cb0[10].xyzx  // output<8:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // RenderSceneVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov o3.xyz, r2.xyzx  // RenderSceneVS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mov o1.xy, r0.xyxx  // RenderSceneVS<4,5>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbDirLightPS
                // {
                //
                //   float3 AmbientDown;                // Offset:    0 Size:    12
                //   float3 AmbientRange;               // Offset:   16 Size:    12
                //   float3 DirToLight;                 // Offset:   32 Size:    12 [unused]
                //   float3 DirLightColor;              // Offset:   48 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // LinearSampler                     sampler      NA          NA    0        1
                // DiffuseTexture                    texture  float4          2d    0        1
                // cbDirLightPS                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyz         2     NONE  float   xyz 
                // TEXCOORD                 2   xyz         3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 87 "C:\Users\Dmitry\Google Drive\code\C#\SpaceshipDrawer\DX11\PointLighting\bin\Debug\FX\ForwardLight.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.x, r0.x, v2.y  // input<7:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t0.wxyz, s0
                mov r0.yzw, r0.yyzw  // diffuse<0:Inf,1:Inf,2:Inf>
                mul r0.yzw, r0.yyzw, r0.yyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r0.x, r0.x  // normal<1:NaN:Inf>
                mov r0.yzw, r0.yyzw  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 18
                mul r0.x, r0.x, l(0.500000)
                add r0.x, r0.x, l(0.500000)  // up<0:NaN:Inf>
                mul r1.xyz, r0.xxxx, cb0[1].xyzx
                add r1.xyz, r1.xyzx, cb0[0].xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r0.yzwy, r1.xyzx  // CalcAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 92
                mov r0.xyz, r0.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r0.xyzx  // AmbientLightPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, l(1.000000)  // AmbientLightPS<3: 1f>
                ret 
                // Approximately 18 instruction slots used
                            
            };
        }

    }

    technique11 DepthPrePass
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectVS
                // {
                //
                //   float4x4 WorldViewProjection;      // Offset:    0 Size:    64
                //   float4x4 World;                    // Offset:   64 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectVS                     cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyz         2     NONE  float   xyz 
                // TEXCOORD                 2   xyz         3     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_temps 4
                
                #line 44 "ForwardLightCommon.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
                
                #line 47
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // output<9:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // output<10:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // output<11:NaN:Inf>
                mov r0.xy, v2.xyxx  // output<4,5>
                dp3 r3.x, v1.xyzx, cb0[8].xyzx  // output<6:NaN:Inf>
                dp3 r3.y, v1.xyzx, cb0[9].xyzx  // output<7:NaN:Inf>
                dp3 r3.z, v1.xyzx, cb0[10].xyzx  // output<8:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // RenderSceneVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov o3.xyz, r2.xyzx  // RenderSceneVS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mov o1.xy, r0.xyxx  // RenderSceneVS<4,5>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = NULL;
        }

    }

    technique11 Directional
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectVS
                // {
                //
                //   float4x4 WorldViewProjection;      // Offset:    0 Size:    64
                //   float4x4 World;                    // Offset:   64 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectVS                     cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyz         2     NONE  float   xyz 
                // TEXCOORD                 2   xyz         3     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_temps 4
                
                #line 44 "ForwardLightCommon.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
                
                #line 47
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // output<9:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // output<10:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // output<11:NaN:Inf>
                mov r0.xy, v2.xyxx  // output<4,5>
                dp3 r3.x, v1.xyzx, cb0[8].xyzx  // output<6:NaN:Inf>
                dp3 r3.y, v1.xyzx, cb0[9].xyzx  // output<7:NaN:Inf>
                dp3 r3.z, v1.xyzx, cb0[10].xyzx  // output<8:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // RenderSceneVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov o3.xyz, r2.xyzx  // RenderSceneVS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mov o1.xy, r0.xyxx  // RenderSceneVS<4,5>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectPS
                // {
                //
                //   float3 EyePosition;                // Offset:    0 Size:    12
                //   float specExp;                     // Offset:   12 Size:     4
                //   float specIntensity;               // Offset:   16 Size:     4
                //
                // }
                //
                // cbuffer cbDirLightPS
                // {
                //
                //   float3 AmbientDown;                // Offset:    0 Size:    12
                //   float3 AmbientRange;               // Offset:   16 Size:    12
                //   float3 DirToLight;                 // Offset:   32 Size:    12
                //   float3 DirLightColor;              // Offset:   48 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // LinearSampler                     sampler      NA          NA    0        1
                // DiffuseTexture                    texture  float4          2d    0        1
                // cbPerObjectPS                     cbuffer      NA          NA    0        1
                // cbDirLightPS                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyz         2     NONE  float   xyz 
                // TEXCOORD                 2   xyz         3     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[2], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 6
                
                #line 66 "C:\Users\Dmitry\Google Drive\code\C#\SpaceshipDrawer\DX11\PointLighting\bin\Debug\FX\ForwardLight.fx"
                nop 
                mov r0.xyz, v2.xyzx  // normal<0,1,2>
                
                #line 66 "ForwardLightCommon.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // material<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
                mov r1.xyz, r1.xyzx  // material<3:Inf,4:Inf,5:Inf>
                
                #line 70
                mul r1.xyz, r1.xyzx, r1.xyzx  // material<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r2.x, cb0[0].w  // material<7>
                mov r2.y, cb0[1].x  // material<8>
                mov r0.xyz, r0.xyzx  // PrepareMaterial<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // PrepareMaterial<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r2.x, r2.x  // PrepareMaterial<7>
                mov r2.y, r2.y  // PrepareMaterial<8>
                
                #line 66 "C:\Users\Dmitry\Google Drive\code\C#\SpaceshipDrawer\DX11\PointLighting\bin\Debug\FX\ForwardLight.fx"
                mov r0.xyz, r0.xyzx  // material<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // material<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r2.xy, r2.xyxx  // material<7,8>
                nop 
                mov r0.w, r0.y  // normal<1:NaN:Inf>
                mov r1.xyz, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 18
                mul r0.w, r0.w, l(0.500000)
                add r0.w, r0.w, l(0.500000)  // up<0:NaN:Inf>
                mul r3.xyz, r0.wwww, cb1[1].xyzx
                add r3.xyz, r3.xyzx, cb1[0].xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r3.xyz, r1.xyzx, r3.xyzx  // CalcAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                mov r3.xyz, r3.xyzx  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                nop 
                mov r4.xyz, v3.xyzx  // position<0,1,2>
                mov r0.xyz, r0.xyzx  // material<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xy, r2.xyxx  // material<7,8>
                
                #line 27
                dp3 r0.w, cb1[2].xyzx, r0.xyzx  // NDotL<0:NaN:Inf>
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                mul r5.xyz, r0.wwww, cb1[3].xyzx  // finalColor<0,1,2>
                
                #line 31
                mov r4.xyz, -r4.xyzx
                add r4.xyz, r4.xyzx, cb0[0].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r4.xyz, r4.xyzx, cb1[2].xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // halfway<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r4.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // NDotH<0:[0f,1f]>
                log r0.x, r0.x
                mul r0.x, r0.x, r2.x
                exp r0.x, r0.x
                mul r0.xyz, r0.xxxx, cb1[3].xyzx
                mul r0.xyz, r2.yyyy, r0.xyzx
                add r0.xyz, r0.xyzx, r5.xyzx  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 38
                mul r0.xyz, r1.xyzx, r0.xyzx  // CalcDirectional<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70
                add r0.xyz, r0.xyzx, r3.xyzx  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r0.xyzx  // DirectionalLightPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, l(1.000000)  // DirectionalLightPS<3: 1f>
                ret 
                // Approximately 57 instruction slots used
                            
            };
        }

    }

    technique11 Point
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectVS
                // {
                //
                //   float4x4 WorldViewProjection;      // Offset:    0 Size:    64
                //   float4x4 World;                    // Offset:   64 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObjectVS                     cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyz         2     NONE  float   xyz 
                // TEXCOORD                 2   xyz         3     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_temps 4
                
                #line 44 "ForwardLightCommon.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
                
                #line 47
                dp4 r2.x, r0.xyzw, cb0[4].xyzw  // output<9:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[5].xyzw  // output<10:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[6].xyzw  // output<11:NaN:Inf>
                mov r0.xy, v2.xyxx  // output<4,5>
                dp3 r3.x, v1.xyzx, cb0[8].xyzx  // output<6:NaN:Inf>
                dp3 r3.y, v1.xyzx, cb0[9].xyzx  // output<7:NaN:Inf>
                dp3 r3.z, v1.xyzx, cb0[10].xyzx  // output<8:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // RenderSceneVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov o3.xyz, r2.xyzx  // RenderSceneVS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf>
                mov o1.xy, r0.xyxx  // RenderSceneVS<4,5>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObjectPS
                // {
                //
                //   float3 EyePosition;                // Offset:    0 Size:    12
                //   float specExp;                     // Offset:   12 Size:     4
                //   float specIntensity;               // Offset:   16 Size:     4
                //
                // }
                //
                // cbuffer PointLightConstants
                // {
                //
                //   float3 PointLightPosition;         // Offset:    0 Size:    12
                //   float PointLightRangeRcp;          // Offset:   12 Size:     4
                //   float3 PointLightColor;            // Offset:   16 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // LinearSampler                     sampler      NA          NA    0        1
                // DiffuseTexture                    texture  float4          2d    0        1
                // cbPerObjectPS                     cbuffer      NA          NA    0        1
                // PointLightConstants               cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xyz         2     NONE  float   xyz 
                // TEXCOORD                 2   xyz         3     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[2], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 6
                
                #line 76 "C:\Users\Dmitry\Google Drive\code\C#\SpaceshipDrawer\DX11\PointLighting\bin\Debug\FX\ForwardLight.fx"
                nop 
                mov r0.xyz, v2.xyzx  // normal<0,1,2>
                
                #line 66 "ForwardLightCommon.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // material<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
                mov r1.xyz, r1.xyzx  // material<3:Inf,4:Inf,5:Inf>
                
                #line 70
                mul r1.xyz, r1.xyzx, r1.xyzx  // material<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r2.x, cb0[0].w  // material<7>
                mov r2.y, cb0[1].x  // material<8>
                mov r0.xyz, r0.xyzx  // PrepareMaterial<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // PrepareMaterial<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r2.x, r2.x  // PrepareMaterial<7>
                mov r2.y, r2.y  // PrepareMaterial<8>
                
                #line 76 "C:\Users\Dmitry\Google Drive\code\C#\SpaceshipDrawer\DX11\PointLighting\bin\Debug\FX\ForwardLight.fx"
                mov r0.xyz, r0.xyzx  // material<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // material<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r2.xy, r2.xyxx  // material<7,8>
                
                #line 79
                nop 
                mov r3.xyz, v3.xyzx  // position<0,1,2>
                mov r0.xyz, r0.xyzx  // material<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // material<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r2.xy, r2.xyxx  // material<7,8>
                
                #line 42
                mov r3.xyz, -r3.xyzx
                add r4.xyz, r3.xyzx, cb1[0].xyzx  // ToLight<0:Inf,1:Inf,2:Inf>
                add r3.xyz, r3.xyzx, cb0[0].xyzx  // ToEye<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r4.xyzx, r4.xyzx
                sqrt r0.w, r0.w  // DistToLight<0:NaN:Inf>
                
                #line 47
                div r4.xyz, r4.xyzx, r0.wwww  // ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r1.w, r4.xyzx, r0.xyzx
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(1.000000)  // NDotL<0:[0f,1f]>
                mul r5.xyz, r1.wwww, cb1[1].xyzx  // finalColor<0,1,2>
                
                #line 52
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // ToEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // HalfWay<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r3.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // NDotH<0:[0f,1f]>
                log r0.x, r0.x
                mul r0.x, r0.x, r2.x
                exp r0.x, r0.x
                mul r0.xyz, r0.xxxx, cb1[1].xyzx
                mul r0.xyz, r2.yyyy, r0.xyzx
                add r0.xyz, r0.xyzx, r5.xyzx  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 58
                mul r0.w, r0.w, cb1[0].w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                mov r0.w, -r0.w
                add r0.w, r0.w, l(1.000000)  // DistToLightNorm<0:[0f,1f]>
                mul r0.w, r0.w, r0.w  // Attn<0:[0f,1f]>
                mul r1.xyz, r0.wwww, r1.xyzx
                mul r0.xyz, r0.xyzx, r1.xyzx  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // CalcPoint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 79
                mov r0.xyz, r0.xyzx  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 82
                mov o0.xyz, r0.xyzx  // PointLightPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, l(1.000000)  // PointLightPS<3: 1f>
                ret 
                // Approximately 61 instruction slots used
                            
            };
        }

    }

}

